language: cpp
sudo: required
dist: trusty
  
python:
  - "2.7"

compiler:
  - gcc

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise
    packages:
      - cmake
      - valgrind
      - gcc-5
      - g++-5
      - clang-format-5.0

before_install:
  - sudo apt-get update
  - sudo apt-get install build-essential
  - sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
  - sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev

install:
  - sudo pip2 install lizard -q # Cyclomatic Complexity Check Tool
  - sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-5 /usr/bin/gcc # Change symlinks of gcc to gcc-5
  - sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-5 /usr/bin/g++ # Change symlinks of g++ to g++-5
  
  #Save current repo directory and go to upper directory to install openCV somewhere else than root repo folder
  - export REPO=${PWD}
  - cd ..

  # Download opencv from Github.
  - git clone https://github.com/opencv/opencv.git
  
  # Download EXTRA MODULES from Github.
  - git clone https://github.com/opencv/opencv_contrib.git

  # Copy xfeatures2d folder into OpenCV modules
  - cp -R opencv_contrib/modules/xfeatures2d opencv/modules/

  # Create a new 'build' folder.
  - cd opencv
  - mkdir build
  - cd build
  
  # Set build instructions for Ubuntu distro.
  -  cmake -D OPENCV_EXTRA_MODULES_PATH= ../../opencv_contrib/modules -D WITH_TBB=ON -D INSTALL_C_EXAMPLES=ON -D WITH_EIGEN=OFF -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D BUILD_opencv_dnn=OFF -D BUILD_opencv_java=OFF ..

  # Run 'make' with four threads
  - make -j4
  
  # Install to OS.
  - sudo make install
  
  # Add configuration to OpenCV to tell it where the library files are located on the file system (/usr/local/lib)
  - sudo sh -c 'echo "/usr/local/lib" > /etc/ld.so.conf.d/opencv.conf'
  
  - sudo ldconfig
  - echo "OpenCV installed."
  
  # We need to return to the repo "root" folder, so we can then 'cd' into the C++ project folder.
  - cd ${REPO}

before_script:
  - gcc --version
  - g++ --version
  - python --version
  - cmake --version
  - valgrind --version
  - lizard --version
  # start X Virtual Framebuffer for emulated GUI
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
  - sleep 3 # give xvfb some time to start

script: 
  - source .fetch-build-environment.sh ~/build-environment/
  - ./test.sh
